#!/bin/bash

set -e

GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}=== my archlinux setup ===${NC}"

status() {
    echo -e "${GREEN}[+] $1${NC}"
}

error() {
    echo -e "${RED}[!] $1${NC}"
    exit 1
}

if [ "$(id -u)" -eq 0 ]; then
    error "Este script deve ser executado como usuário comum, não como root."
fi

status "Criando diretórios básicos..."
mkdir -p ~/Tmp ~/Github ~/Downloads ~/Image ~/Video

status "Configurando pacman..."
PACMAN_CONF="/etc/pacman.conf"
if ! grep -q "ILoveCandy" $PACMAN_CONF; then
    sudo sed -i "/\[options\]/a ILoveCandy" $PACMAN_CONF
    sudo sed -i "/\[options\]/a Color" $PACMAN_CONF
    sudo sed -i "/\[options\]/a ParallelDownloads = 20" $PACMAN_CONF
    status "Configurações do pacman atualizadas."
else
    status "Configurações do pacman já estão atualizadas."
fi

status "Configurando Fish como shell padrão..."
if ! command -v fish &> /dev/null; then
    status "Instalando fish shell..."
    sudo pacman -S --noconfirm fish
fi
CURRENT_SHELL=$(getent passwd $USER | cut -d: -f7)
if [[ "$CURRENT_SHELL" != *"fish"* ]]; then
    chsh -s $(which fish)
    status "Fish configurado como shell padrão. Será necessário fazer login novamente para aplicar."
else
    status "Fish já está configurado como shell padrão."
fi

status "Configurando Paru (AUR helper)..."
if ! command -v paru &> /dev/null; then
    status "Instalando dependências do Paru..."
    sudo pacman -S --noconfirm --needed base-devel git

    status "Clonando e instalando Paru..."
    cd ~/Tmp
    git clone https://aur.archlinux.org/paru.git
    cd paru
    makepkg -si --noconfirm
    cd ~
    status "Paru instalado com sucesso."
else
    status "Paru já está instalado."
fi

status "Instalando pacotes da lista..."
LIST="$HOME/.packages.list"

if [ ! -f "$LIST" ]; then
    echo -e "# Lista de pacotes para instalação\n# Um pacote por linha\n# Linhas iniciando com # são comentários" > "$LIST"
    status "Arquivo $LIST criado. Por favor, adicione os pacotes desejados e execute o script novamente."
    exit 0
fi

packages=()
while IFS= read -r line; do
  if [[ -z "$line" || "$line" == \#* ]]; then
    continue
  fi
  if ! pacman -Q "$line" &>/dev/null; then
    packages+=("$line")
  fi
done < "$LIST"

if [ ${#packages[@]} -gt 0 ]; then
    status "Instalando ${#packages[@]} pacotes: ${packages[*]}"
    paru -S --noconfirm "${packages[@]}" || error "Falha na instalação de pacotes."
else
    status "Todos os pacotes já estão instalados."
fi

status "Configurando Docker..."
if ! command -v docker &> /dev/null; then
    status "Instalando Docker..."
    sudo pacman -S --noconfirm docker
fi

if ! groups $USER | grep -q docker; then
    sudo usermod -aG docker $USER
    status "Usuário adicionado ao grupo docker. Será necessário fazer login novamente para aplicar."
else
    status "Usuário já está no grupo docker."
fi

status "Configurando Libvirt..."
if ! command -v virsh &> /dev/null; then
    status "Instalando Libvirt..."
    sudo pacman -S --noconfirm libvirt qemu-desktop virt-manager dnsmasq
fi

LIBVIRT_NET_CONF="/etc/libvirt/libvirtd.conf"
if [ ! -f "$LIBVIRT_NET_CONF" ]; then
    error "Arquivo $LIBVIRT_NET_CONF não encontrado. Verifique a instalação do libvirt."
fi

CONTENT='unix_sock_group = "libvirt"
unix_sock_rw_perms = "0770"
firewall_backend = "iptables"'

if ! grep -q "firewall_backend = \"iptables\"" "$LIBVIRT_NET_CONF"; then
    echo "$CONTENT" | sudo tee -a "$LIBVIRT_NET_CONF" > /dev/null
    status "Configurações do libvirt atualizadas."
else
    status "Configurações do libvirt já estão atualizadas."
fi

if ! groups $USER | grep -q libvirt; then
    sudo usermod -aG libvirt $USER
    status "Usuário adicionado ao grupo libvirt. Será necessário fazer login novamente para aplicar."
else
    status "Usuário já está no grupo libvirt."
fi

status "Habilitando serviços..."
sudo systemctl enable bluetooth
sudo systemctl enable libvirtd
sudo systemctl enable docker

services_status="Serviços habilitados:"
for service in bluetooth libvirtd docker; do
    if systemctl is-enabled $service &>/dev/null; then
        services_status="$services_status\n - $service: ${GREEN}habilitado${NC}"
    else
        services_status="$services_status\n - $service: ${RED}não habilitado${NC}"
    fi
done
echo -e "$services_status"

status "Instalação concluída com sucesso!"
echo -e "${BLUE}====================================${NC}"
echo -e "${BLUE}Recomendações:${NC}"
echo -e "1. Reinicie o sistema para aplicar todas as alterações"
echo -e "2. Verifique se todos os serviços estão funcionando corretamente"
echo -e "3. Execute 'groups' após o login para confirmar a adição aos grupos docker e libvirt"
echo -e "${BLUE}====================================${NC}"
